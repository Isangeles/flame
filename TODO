MAJOR:
* Switching chapters
* Item materials
* Extend crafting struct to be something more than mere recipes container(proficiency points, etc.)
MINOR:
* More examples
* Improve combat system(include resilience, stats bonuses, etc.)
* Improve NPC AI(selecting skills proper to situation)
* Remove generateSerials function from chapter struct
* Refactor chapter's SetOnAreaAddedFunc to AddOnAreaAddedFunc, i.e. adding event functions, not just handling and overriding one function
* Use sync.Map to store area objects(and subareas?)
* Exporting character exports also quests, effects, items, etc., its desirable for save game, but other marshaling method should be applied for exporting character to use in different game
* Merge SaveGame struct from save to res package
* Rename quest.Journal to QuestLog(quest.Log?), journal could be something else
* Remove character.AddRecipe and character.Recipes function, since now character recipes are accessible through crafting object
DONE:
* Generating of unique serial values for game objects
* Save/load game mechanism
* Game characters inventory and equipment
* Weapons, armors & misc items
* Effects & modifiers
* Skills
* Game objects
* Parse imported characters to characters data objects
* NPC AI
* Player-NPC interaction
* Dialogs system
* Flags for objects
* Quests system
* Module, chapters, scenarios
* Crafting system
* NPC trainers
* Changing areas